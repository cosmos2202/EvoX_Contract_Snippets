{"ast":null,"code":"'use strict';\n\nconst isVoidElement = require('is-void-element');\nconst isPresent = require('is-present');\nconst {\n  load\n} = require('cheerio');\nconst SKIP_FORMAT = [\n// https://www.w3.org/TR/html5/dom.html#phrasing-content\n'a', 'abbr', 'area', 'audio', 'b', 'bdi', 'bdo', 'br', 'button', 'canvas', 'cite', 'code', 'data', 'datalist', 'del', 'dfn', 'em', 'embed', 'i', 'iframe', 'img', 'input', 'ins', 'kbd', 'keygen', 'label', 'map', 'mark', 'math', 'meter', 'noscript', 'object', 'output', 'progress', 'q', 'ruby', 's', 'samp', 'script', 'select', 'small', 'span', 'strong', 'sub', 'sup', 'svg', 'template', 'textarea', 'time', 'u', 'var', 'video', 'wbr', 'text'];\nconst SKIP_CONTENT_FORMAT = ['pre', 'code'];\nconst INDENTATION_CHARS = '  ';\nmodule.exports = function (html) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const $parser = load(html, {\n    decodeEntities: false\n  });\n  const root = $parser.root();\n  const elements = [];\n  return root.children().map((_, el) => stringify(el, 0, $parser)).get().join('\\n');\n};\nconst stringify = function (el) {\n  let indentLevel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let $parser = arguments.length > 2 ? arguments[2] : undefined;\n  if (el.children) {\n    const attrs = stringifyAttrs(el);\n    if (isVoidElement(el.name)) {\n      const voidHtml = [`<${el.name}`, attrs, '/>'].filter(Boolean).join(' ');\n      return indent(indentLevel, voidHtml);\n    } else {\n      const allTextChildren = !el.children.map(c => c.type).filter(t => t !== 'text').length;\n      const open = attrs ? `<${el.name} ${attrs}>` : `<${el.name}>`;\n      const close = `</${el.name}>`;\n      let innerHtml = '';\n      if (SKIP_CONTENT_FORMAT.includes(el.tagName)) {\n        innerHtml = $parser(el).html();\n        return indent(indentLevel, [open, innerHtml, close].join(''));\n      } else if (allTextChildren) {\n        innerHtml = collapseWhitespace(el.children.map(c => c.data).join(''));\n        return indent(indentLevel, [open, innerHtml, close].join(''));\n      }\n      const children = el.children.map(c => stringify(c, indentLevel + 1, $parser)).filter(isPresent).join(\"\\n\");\n      return [indent(indentLevel, open), children, indent(indentLevel, close)].join(\"\\n\");\n    }\n  } else {\n    return isPresent(el.data) ? indent(indentLevel, el.data.trim()) : '';\n  }\n};\nconst indent = function () {\n  let level = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  let str = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  return `${Array(level + 1).join(INDENTATION_CHARS)}${str}`;\n};\nconst collapseWhitespace = function () {\n  let content = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  return content.replace(/(\\s)/g, ' ').replace(/(\\s{2,})/g, ' ');\n};\nconst stringifyAttrs = el => Object.keys(el.attribs).map(attr => `${attr}=\"${el.attribs[attr]}\"`).join(' ');","map":null,"metadata":{},"sourceType":"script"}